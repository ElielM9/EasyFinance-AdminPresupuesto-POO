const expensesList=document.querySelector("#expenses ul");let budget;function startApp(){requestName(),requestBudget(),budgetFormEvents()}document.addEventListener("DOMContentLoaded",startApp);class Budget{constructor(e){this.budgetTotal=e,this.budgetAvailable=e,this.budgetSpent=0,this.expenses=[]}newExpenses(e){this.expenses=[...this.expenses,e],this.calculateSpent()}calculateSpent(){this.budgetSpent=this.expenses.reduce((e,t)=>e+t.inputAmount,0),this.budgetAvailable=this.budgetTotal-this.budgetSpent}}class UserInterface{insertName(e){document.querySelector(".budget__heading--user-name").textContent=e+"!"}insertBudget(e){const{budgetTotal:t,budgetAvailable:n,budgetSpent:r}=e;let s=t.toLocaleString("es-MX",{style:"currency",currency:"MXN"}),u=n.toLocaleString("es-MX",{style:"currency",currency:"MXN"}),o=r.toLocaleString("es-MX",{style:"currency",currency:"MXN"});document.querySelector("#budgetCardTotal").textContent=""+s,document.querySelector("#budgetCardAvailable").textContent=""+u,document.querySelector("#budgetCardSpent").textContent=""+o}printAlerts(e,t){const n=document.createElement("p");n.classList.add("alert"),"error"===t?n.classList.add("alert--error"):n.classList.add("alert--success"),n.textContent=e;document.querySelector("#budgetForm").appendChild(n),setTimeout(()=>{n.remove()},3e3)}addExpenseList(e){this.cleanHtml(),e.forEach(e=>{const{inputName:t,inputAmount:n,selectedCategory:r,id:s}=e,u=n.toLocaleString("es-MX",{style:"currency",currency:"MXN"}),o=document.createElement("li");o.className="expense-item",o.dataset.id=s,o.dataset.category=r,o.innerHTML=`\n        <div class="expense-item__texts">\n          <p class="expense-item__description">${t}</p>\n          <p class="expense-item__price">${u}</p>\n        </div>\n      `;const c=document.createElement("button");c.classList.add("expense-item__btn"),c.textContent="X",o.appendChild(c),expensesList.appendChild(o)})}cleanHtml(){for(;expensesList.firstChild;)expensesList.removeChild(expensesList.firstChild)}updateBudget(e,t){let n=e.toLocaleString("es-MX",{style:"currency",currency:"MXN"}),r=t.toLocaleString("es-MX",{style:"currency",currency:"MXN"});document.querySelector("#budgetCardAvailable").textContent=""+n,document.querySelector("#budgetCardSpent").textContent=""+r}}const userInterface=new UserInterface;function requestName(){let e;do{e=prompt("¿Cuál es tu nombre?"),e||alert("Por favor, introduce un nombre válido.")}while(!e);userInterface.insertName(e)}function requestBudget(){const e=Number(prompt("¿Cuál es tu presupuesto?"));(""===e||null===e||isNaN(e)||e<=0)&&window.location.reload(),budget=new Budget(e),userInterface.insertBudget(budget)}function budgetFormEvents(){document.querySelector("#budgetForm").addEventListener("submit",addExpense)}function addExpense(e){e.preventDefault();const t=document.querySelector("#budgetFormName").value,n=Number(document.querySelector("#budgetFormAmount").value),r=document.querySelector("#budgetFormCategory").value;if(""===t||""===n||""===r)return void userInterface.printAlerts("Todos los campos son obligatorios","error");if(n<=0||isNaN(n))return void userInterface.printAlerts("Cantidad no valida","error");const s={inputName:t,inputAmount:n,selectedCategory:r,id:Date.now()};budget.newExpenses(s),userInterface.printAlerts("Se agregó correctamente","success");const{expenses:u,budgetAvailable:o,budgetSpent:c}=budget;userInterface.addExpenseList(u),userInterface.updateBudget(o,c);document.querySelector("#budgetForm").reset()}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
