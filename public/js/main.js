const expensesList=document.querySelector("#expenses ul");let budget;function startApp(){requestName(),requestBudget(),budgetFormEvents()}document.addEventListener("DOMContentLoaded",startApp);class Budget{constructor(e){this.budgetTotal=e,this.budgetAvailable=e,this.budgetSpent=0,this.expenses=[]}newExpenses(e){this.expenses=[...this.expenses,e]}}class UserInterface{insertName(e){document.querySelector(".budget__heading--user-name").textContent=e+"!"}insertBudget(e){const{budgetTotal:t,budgetAvailable:n,budgetSpent:r}=e;let s=t.toLocaleString("es-MX",{style:"currency",currency:"MXN"}),o=n.toLocaleString("es-MX",{style:"currency",currency:"MXN"}),u=r.toLocaleString("es-MX",{style:"currency",currency:"MXN"});document.querySelector("#budgetCardTotal").textContent=""+s,document.querySelector("#budgetCardAvailable").textContent=""+o,document.querySelector("#budgetCardSpent").textContent=""+u}printAlerts(e,t){const n=document.createElement("p");n.classList.add("alert"),"error"===t?n.classList.add("alert--error"):n.classList.add("alert--success"),n.textContent=e;document.querySelector("#budgetForm").appendChild(n),setTimeout(()=>{n.remove()},3e3)}addExpenseList(e){this.cleanHtml(),e.forEach(e=>{const{inputName:t,inputAmount:n,selectedCategory:r,id:s}=e,o=n.toLocaleString("es-MX",{style:"currency",currency:"MXN"}),u=document.createElement("li");u.className="expense-item",u.dataset.id=s,u.dataset.category=r,u.innerHTML=`\n        <div class="expense-item__texts">\n          <p class="expense-item__description">${t}</p>\n          <p class="expense-item__price">${o}</p>\n        </div>\n      `;const c=document.createElement("button");c.classList.add("expense-item__btn"),c.textContent="X",u.appendChild(c),expensesList.appendChild(u)})}cleanHtml(){for(;expensesList.firstChild;)expensesList.removeChild(expensesList.firstChild)}}const userInterface=new UserInterface;function requestName(){let e;do{e=prompt("¿Cuál es tu nombre?"),e||alert("Por favor, introduce un nombre válido.")}while(!e);userInterface.insertName(e)}function requestBudget(){const e=Number(prompt("¿Cuál es tu presupuesto?"));(""===e||null===e||isNaN(e)||e<=0)&&window.location.reload(),budget=new Budget(e),userInterface.insertBudget(budget)}function budgetFormEvents(){document.querySelector("#budgetForm").addEventListener("submit",addExpense)}function addExpense(e){e.preventDefault();const t=document.querySelector("#budgetFormName").value,n=Number(document.querySelector("#budgetFormAmount").value),r=document.querySelector("#budgetFormCategory").value;if(""===t||""===n||""===r)return void userInterface.printAlerts("Todos los campos son obligatorios","error");if(n<=0||isNaN(n))return void userInterface.printAlerts("Cantidad no valida","error");const s={inputName:t,inputAmount:n,selectedCategory:r,id:Date.now()};budget.newExpenses(s),userInterface.printAlerts("Se agregó correctamente","success");const{expenses:o}=budget;userInterface.addExpenseList(o);document.querySelector("#budgetForm").reset()}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
