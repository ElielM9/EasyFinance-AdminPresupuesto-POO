const expensesList=document.querySelector("#expenses ul");let budget;function startApp(){requestName(),requestBudget(),budgetFormEvents()}document.addEventListener("DOMContentLoaded",startApp);class Budget{constructor(e){this.budgetTotal=e,this.budgetAvailable=e,this.expenses=[]}}class UserInterface{insertName(e){document.querySelector(".budget__heading--user-name").textContent=e+"!"}insertBudget(e){const{budgetTotal:t,budgetAvailable:r}=e;let n=t.toLocaleString("es-MX",{style:"currency",currency:"MXN"}),o=r.toLocaleString("es-MX",{style:"currency",currency:"MXN"});document.querySelector("#budgetCardTotal").textContent=""+n,document.querySelector("#budgetCardAvailable").textContent=""+o}printAlerts(e,t){const r=document.createElement("p");r.classList.add("alert"),"error"===t?r.classList.add("alert--error"):r.classList.add("alert--success"),r.textContent=e;document.querySelector("#budgetForm").appendChild(r),setTimeout(()=>{r.remove()},3e3)}}const userInterface=new UserInterface;function requestName(){let e;do{e=prompt("¿Cuál es tu nombre?"),e||alert("Por favor, introduce un nombre válido.")}while(!e);userInterface.insertName(e)}function requestBudget(){const e=Number(prompt("¿Cuál es tu presupuesto?"));(""===e||null===e||isNaN(e)||e<=0)&&window.location.reload(),budget=new Budget(e),userInterface.insertBudget(budget)}function budgetFormEvents(){document.querySelector("#budgetForm").addEventListener("submit",addExpense)}function addExpense(e){e.preventDefault();const t=document.querySelector("#budgetFormName").value,r=document.querySelector("#budgetFormAmount").value,n=document.querySelector("#budgetFormCategory").value;""!==t&&""!==r&&""!==n?r<=0||isNaN(r)?userInterface.printAlerts("Cantidad no valida","error"):userInterface.printAlerts("Cargando...","success"):userInterface.printAlerts("Todos los campos son obligatorios","error")}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
